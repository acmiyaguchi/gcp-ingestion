#!/bin/bash

# Generate a new archive with avro schemas from the mozilla-pipeline-schema
# repository. This script is meant for integration testing of the avro file-sink
# in conjunction to sampled landfill data. This will generate a new gzipped
# archive containing avro schemas at the beam project level named
# avro-schema.tar.gz.

set -e

cd "$(dirname "$0")/.." || exit

if [ ! -x  "$(command -v jsonschema-transpiler)" ]; then
    echo "jsonschema-transpiler is not installed"
    echo "Run 'cargo install --git https://github.com/acmiyaguchi/jsonschema-transpiler.git --branch dev'"
    exit 1
fi

if [[ ! -f schemas.tar.gz ]]; then
    echo "Run 'bin/download-schemas'"
    exit 1
fi

function init_working_directory() {
    # Create a temporary directory for working. The current directory is stored
    # into $rootdir and the working directory is stored into $workdir. The
    # working directory will be removed on exit.
    rootdir=$(pwd)
    workdir=$(mktemp -d -t tmp.XXXXXXXXXX)
    function cleanup {
        rm -rf "$workdir"
        echo "Running cleanup!"
    }
    trap cleanup EXIT
    cd "$workdir" || exit
}

total=0
failed=0
function generate_avro_schema() {
    # From a relative path to a jsonschema, transpile an avro schema in a
    # mirrored directory. This function requires the following global variables:
    # $total, $failed
    local src=$1
    local root=$2

    # Relative path to the root of the archive, using shell parameter expansion
    # to strip the root
    local relpath
    local name
    relpath=$(dirname "${src#*/}")
    name="$(basename "$src" .schema.json).avro.json"
    local dst="$root/$relpath/$name"
    
    # Create the folder to the new schema
    mkdir -p "$root/$relpath"

    if ! jsonschema-transpiler --type avro "$src" > "$dst" 2> /dev/null; then
        echo "Unable to convert $(basename "$src")"
        rm "$dst"
        ((failed++))
    fi
    ((total++))
    return 0
}

init_working_directory

src="mozilla-pipeline-schemas"
dst="mps-avro-ingestion-tests"

# Find all JSON schemas in the extracted archive. The top-level folder in the
# archive is consistently named in `bin/download-schemas`
tar -xf "$rootdir/schemas.tar.gz" -C "$workdir"
schemas=$(find $src/schemas -type file -name "*.schema.json")

# Transpile avro schema into a destination directory
for schema in $schemas; do
    generate_avro_schema "$schema" $dst
done
echo "$((total-failed))/$total sucessfully converted"

# Prune folders from failed conversions
find "$dst" -type d -empty -delete

# Generate the final archive
tar -zcf avro-schema.tar.gz "$dst"
cp avro-schema.tar.gz "$rootdir"
